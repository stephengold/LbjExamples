// Gradle script to build the LbjExamples/apps sub-project

plugins {
    id 'application'
}

// run the apps

tasks.register('AppChooser', JavaExec) {
    mainClass = 'com.github.stephengold.lbjexamples.apps.AppChooser'
}

tasks.register('HelloContactResponse', JavaExec) {
    mainClass = 'com.github.stephengold.lbjexamples.apps.HelloContactResponse'
}
tasks.register('HelloDamping', JavaExec) {
    mainClass = 'com.github.stephengold.lbjexamples.apps.HelloDamping'
}
tasks.register('HelloKinematics', JavaExec) {
    mainClass = 'com.github.stephengold.lbjexamples.apps.HelloKinematics'
}
tasks.register('HelloLibbulletjme', JavaExec) {
    mainClass = 'com.github.stephengold.lbjexamples.apps.HelloLibbulletjme'
}
tasks.register('HelloRigidBody', JavaExec) {
    mainClass = 'com.github.stephengold.lbjexamples.apps.HelloRigidBody'
}
tasks.register('HelloStaticBody', JavaExec) {
    mainClass = 'com.github.stephengold.lbjexamples.apps.HelloStaticBody'
}
tasks.register('HelloVehicle', JavaExec) {
    mainClass = 'com.github.stephengold.lbjexamples.apps.HelloVehicle'
}
tasks.register('ThousandCubes', JavaExec) {
    mainClass = 'com.github.stephengold.lbjexamples.apps.ThousandCubes'
}

import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform
OperatingSystem os = DefaultNativePlatform.currentOperatingSystem
Boolean includeLinux = os.isLinux()
Boolean includeMacOsX = os.isMacOsX()
Boolean includeWindows = os.isWindows()

tasks.withType(JavaExec) { // Java runtime options:
    classpath sourceSets.main.runtimeClasspath
    enableAssertions true
    jvmArgs '-XX:+UseG1GC', '-XX:MaxGCPauseMillis=10'
}

mainClassName = 'com.github.stephengold.lbjexamples.apps.HelloLibbulletjme'
if (!hasProperty('mainClass')) {
    ext.mainClass = mainClassName
}
jar.manifest.attributes('Main-Class': mainClassName)

dependencies {
    implementation project(':common')

    if (includeLinux) {
        runtimeOnly "org.lwjgl:lwjgl:${lwjglVersion}:natives-linux"
        runtimeOnly "org.lwjgl:lwjgl-glfw:${lwjglVersion}:natives-linux"
        runtimeOnly "org.lwjgl:lwjgl-opengl:${lwjglVersion}:natives-linux"

        runtimeOnly "org.lwjgl:lwjgl:${lwjglVersion}:natives-linux-arm32"
        runtimeOnly "org.lwjgl:lwjgl-glfw:${lwjglVersion}:natives-linux-arm32"
        runtimeOnly "org.lwjgl:lwjgl-opengl:${lwjglVersion}:natives-linux-arm32"

        runtimeOnly "org.lwjgl:lwjgl:${lwjglVersion}:natives-linux-arm64"
        runtimeOnly "org.lwjgl:lwjgl-glfw:${lwjglVersion}:natives-linux-arm64"
        runtimeOnly "org.lwjgl:lwjgl-opengl:${lwjglVersion}:natives-linux-arm64"
    }

    if (includeMacOsX) {
        runtimeOnly "org.lwjgl:lwjgl:${lwjglVersion}:natives-macos"
        runtimeOnly "org.lwjgl:lwjgl-glfw:${lwjglVersion}:natives-macos"
        runtimeOnly "org.lwjgl:lwjgl-opengl:${lwjglVersion}:natives-macos"

        runtimeOnly "org.lwjgl:lwjgl:${lwjglVersion}:natives-macos-arm64"
        runtimeOnly "org.lwjgl:lwjgl-glfw:${lwjglVersion}:natives-macos-arm64"
        runtimeOnly "org.lwjgl:lwjgl-opengl:${lwjglVersion}:natives-macos-arm64"
    }

    if (includeWindows) {
        runtimeOnly "org.lwjgl:lwjgl:${lwjglVersion}:natives-windows"
        runtimeOnly "org.lwjgl:lwjgl-glfw:${lwjglVersion}:natives-windows"
        runtimeOnly "org.lwjgl:lwjgl-opengl:${lwjglVersion}:natives-windows"

        runtimeOnly "org.lwjgl:lwjgl:${lwjglVersion}:natives-windows-x86"
        runtimeOnly "org.lwjgl:lwjgl-glfw:${lwjglVersion}:natives-windows-x86"
        runtimeOnly "org.lwjgl:lwjgl-opengl:${lwjglVersion}:natives-windows-x86"
    }
}
