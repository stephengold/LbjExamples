// Gradle script to build the LbjExamples/apps sub-project

plugins {
    id 'application'
}

ext {
    // which BTF (buildType + flavor) of the native physics library to use:
    //btf = 'DebugSp'
    btf = 'ReleaseSp'

    fs = System.getProperty('file.separator')
    downloadsDir = System.getProperty('user.home') + fs + 'Downloads' + fs

    // URL from which native physics libraries should be copied:
    libbulletjmeUrl = "https://github.com/stephengold/Libbulletjme/releases/download/$lbjVersion/"
    //libbulletjmeUrl = "file:///home/sgold/NetBeansProjects/Libbulletjme/dist/"
}

// tasks to run specific apps:

tasks.register('AppChooser', JavaExec) {
    enableAssertions true
    mainClass = 'com.github.stephengold.lbjexamples.AppChooser'
}

// demos
tasks.register('ConveyorDemo', JavaExec) {
    enableAssertions true
    mainClass = 'com.github.stephengold.lbjexamples.ConveyorDemo'
}
tasks.register('NewtonsCradle', JavaExec) {
    enableAssertions true
    mainClass = 'com.github.stephengold.lbjexamples.NewtonsCradle'
}
tasks.register('Pachinko', JavaExec) {
    enableAssertions true
    mainClass = 'com.github.stephengold.lbjexamples.Pachinko'
}
tasks.register('SplitDemo', JavaExec) {
    enableAssertions true
    mainClass = 'com.github.stephengold.lbjexamples.SplitDemo'
}
tasks.register('TestGearJoint', JavaExec) {
    enableAssertions true
    mainClass = 'com.github.stephengold.lbjexamples.TestGearJoint'
}
tasks.register('ThousandCubes', JavaExec) {
    enableAssertions true
    mainClass = 'com.github.stephengold.lbjexamples.ThousandCubes'
}
tasks.register('Windlass', JavaExec) {
    enableAssertions true
    mainClass = 'com.github.stephengold.lbjexamples.Windlass'
}

// console apps (no graphics)
tasks.register('HelloLibbulletjme', JavaExec) {
    enableAssertions true
    mainClass = 'com.github.stephengold.lbjexamples.apps.console.HelloLibbulletjme'
}
tasks.register('HelloVehicle0', JavaExec) {
    enableAssertions true
    mainClass = 'com.github.stephengold.lbjexamples.apps.console.HelloVehicle0'
}
tasks.register('SpeedTest0', JavaExec) {
    args 0
    mainClass = 'com.github.stephengold.lbjexamples.apps.console.SpeedTest'
}
tasks.register('SpeedTest1', JavaExec) {
    args 1
    mainClass = 'com.github.stephengold.lbjexamples.apps.console.SpeedTest'
}
tasks.register('SpeedTest2', JavaExec) {
    args 2
    mainClass = 'com.github.stephengold.lbjexamples.apps.console.SpeedTest'
}

// physics tutorials (very simple)
tasks.register('HelloCcd', JavaExec) {
    enableAssertions true
    mainClass = 'com.github.stephengold.lbjexamples.apps.HelloCcd'
}
tasks.register('HelloCharacter', JavaExec) {
    enableAssertions true
    mainClass = 'com.github.stephengold.lbjexamples.apps.HelloCharacter'
}
tasks.register('HelloCloth', JavaExec) {
    enableAssertions true
    mainClass = 'com.github.stephengold.lbjexamples.apps.HelloCloth'
}
tasks.register('HelloContactResponse', JavaExec) {
    enableAssertions true
    mainClass = 'com.github.stephengold.lbjexamples.apps.HelloContactResponse'
}
tasks.register('HelloDamping', JavaExec) {
    enableAssertions true
    mainClass = 'com.github.stephengold.lbjexamples.apps.HelloDamping'
}
tasks.register('HelloDeactivation', JavaExec) {
    enableAssertions true
    mainClass = 'com.github.stephengold.lbjexamples.apps.HelloDeactivation'
}
tasks.register('HelloDoubleEnded', JavaExec) {
    enableAssertions true
    mainClass = 'com.github.stephengold.lbjexamples.apps.HelloDoubleEnded'
}
tasks.register('HelloGhost', JavaExec) {
    enableAssertions true
    mainClass = 'com.github.stephengold.lbjexamples.apps.HelloGhost'
}
tasks.register('HelloJoint', JavaExec) {
    enableAssertions true
    mainClass = 'com.github.stephengold.lbjexamples.apps.HelloJoint'
}
tasks.register('HelloKinematics', JavaExec) {
    enableAssertions true
    mainClass = 'com.github.stephengold.lbjexamples.apps.HelloKinematics'
}
tasks.register('HelloLimit', JavaExec) {
    enableAssertions true
    mainClass = 'com.github.stephengold.lbjexamples.apps.HelloLimit'
}
tasks.register('HelloMadMallet', JavaExec) {
    enableAssertions true
    mainClass = 'com.github.stephengold.lbjexamples.apps.HelloMadMallet'
}
tasks.register('HelloMassDistribution', JavaExec) {
    enableAssertions true
    mainClass = 'com.github.stephengold.lbjexamples.apps.HelloMassDistribution'
}
tasks.register('HelloMotor', JavaExec) {
    enableAssertions true
    mainClass = 'com.github.stephengold.lbjexamples.apps.HelloMotor'
}
tasks.register('HelloNonUniformGravity', JavaExec) {
    enableAssertions true
    mainClass = 'com.github.stephengold.lbjexamples.apps.HelloNonUniformGravity'
}
tasks.register('HelloPin', JavaExec) {
    enableAssertions true
    mainClass = 'com.github.stephengold.lbjexamples.apps.HelloPin'
}
tasks.register('HelloRigidBody', JavaExec) {
    enableAssertions true
    mainClass = 'com.github.stephengold.lbjexamples.apps.HelloRigidBody'
}
tasks.register('HelloServo', JavaExec) {
    enableAssertions true
    mainClass = 'com.github.stephengold.lbjexamples.apps.HelloServo'
}
tasks.register('HelloSoftBody', JavaExec) {
    enableAssertions true
    mainClass = 'com.github.stephengold.lbjexamples.apps.HelloSoftBody'
}
tasks.register('HelloSoftRope', JavaExec) {
    enableAssertions true
    mainClass = 'com.github.stephengold.lbjexamples.apps.HelloSoftRope'
}
tasks.register('HelloSoftSoft', JavaExec) {
    enableAssertions true
    mainClass = 'com.github.stephengold.lbjexamples.apps.HelloSoftSoft'
}
tasks.register('HelloSport', JavaExec) {
    enableAssertions true
    mainClass = 'com.github.stephengold.lbjexamples.apps.HelloSport'
}
tasks.register('HelloSpring', JavaExec) {
    enableAssertions true
    mainClass = 'com.github.stephengold.lbjexamples.apps.HelloSpring'
}
tasks.register('HelloStaticBody', JavaExec) {
    enableAssertions true
    mainClass = 'com.github.stephengold.lbjexamples.apps.HelloStaticBody'
}
tasks.register('HelloVehicle', JavaExec) {
    enableAssertions true
    mainClass = 'com.github.stephengold.lbjexamples.apps.HelloVehicle'
}
tasks.register('HelloWalk', JavaExec) {
    enableAssertions true
    mainClass = 'com.github.stephengold.lbjexamples.apps.HelloWalk'
}
tasks.register('HelloWind', JavaExec) {
    enableAssertions true
    mainClass = 'com.github.stephengold.lbjexamples.apps.HelloWind'
}

// graphics-only tests
tasks.register('CheckerboardTest', JavaExec) {
    enableAssertions true
    mainClass = 'com.github.stephengold.sport.test.CheckerboardTest'
}
tasks.register('ClipspaceTest', JavaExec) {
    enableAssertions true
    mainClass = 'com.github.stephengold.sport.test.ClipspaceTest'
}
tasks.register('DynamicMeshTest', JavaExec) {
    enableAssertions true
    mainClass = 'com.github.stephengold.sport.test.DynamicMeshTest'
}
tasks.register('IcosphereTest', JavaExec) {
    enableAssertions true
    mainClass = 'com.github.stephengold.sport.test.IcosphereTest'
}
tasks.register('MouseTest', JavaExec) {
    enableAssertions true
    mainClass = 'com.github.stephengold.sport.test.MouseTest'
}
tasks.register('MouseTest2', JavaExec) {
    enableAssertions true
    mainClass = 'com.github.stephengold.sport.test.MouseTest2'
}
tasks.register('OctasphereTest', JavaExec) {
    enableAssertions true
    mainClass = 'com.github.stephengold.sport.test.OctasphereTest'
}
tasks.register('RainbowTest', JavaExec) {
    enableAssertions true
    mainClass = 'com.github.stephengold.sport.test.RainbowTest'
}
tasks.register('SpriteTest', JavaExec) {
    enableAssertions true
    mainClass = 'com.github.stephengold.sport.test.SpriteTest'
}
tasks.register('TextureTest', JavaExec) {
    enableAssertions true
    mainClass = 'com.github.stephengold.sport.test.TextureTest'
}

import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform
OperatingSystem os = DefaultNativePlatform.currentOperatingSystem
Boolean includeLinux = os.isLinux()
Boolean includeMacOsX = os.isMacOsX()
Boolean includeWindows = os.isWindows()

tasks.withType(JavaExec) { // Java runtime options:
    if (os.isMacOsX()) {
        jvmArgs '-XstartOnFirstThread' // required for GLFW on macOS
    }
    classpath sourceSets.main.runtimeClasspath
    jvmArgs '-XX:+UseG1GC', '-XX:MaxGCPauseMillis=10'

    if (includeLinux) {
        dependsOn 'downloadLinux64'
        dependsOn 'downloadLinux_ARM32'
        dependsOn 'downloadLinux_ARM64'
    }
    if (includeMacOsX) {
        dependsOn 'downloadMacOSX64'
        dependsOn 'downloadMacOSX_ARM64'
    }
    if (includeWindows) {
        dependsOn 'downloadWindows32'
        dependsOn 'downloadWindows64'
    }
}

mainClassName = 'com.github.stephengold.lbjexamples.AppChooser'
if (!hasProperty('mainClass')) {
    ext.mainClass = mainClassName
}
jar.manifest.attributes('Main-Class': mainClassName)

dependencies {
    implementation project(':common')

    if (includeLinux) {
        runtimeOnly "org.lwjgl:lwjgl:${lwjglVersion}:natives-linux"
        runtimeOnly "org.lwjgl:lwjgl-glfw:${lwjglVersion}:natives-linux"
        runtimeOnly "org.lwjgl:lwjgl-opengl:${lwjglVersion}:natives-linux"

        runtimeOnly "org.lwjgl:lwjgl:${lwjglVersion}:natives-linux-arm32"
        runtimeOnly "org.lwjgl:lwjgl-glfw:${lwjglVersion}:natives-linux-arm32"
        runtimeOnly "org.lwjgl:lwjgl-opengl:${lwjglVersion}:natives-linux-arm32"

        runtimeOnly "org.lwjgl:lwjgl:${lwjglVersion}:natives-linux-arm64"
        runtimeOnly "org.lwjgl:lwjgl-glfw:${lwjglVersion}:natives-linux-arm64"
        runtimeOnly "org.lwjgl:lwjgl-opengl:${lwjglVersion}:natives-linux-arm64"
    }

    if (includeMacOsX) {
        runtimeOnly "org.lwjgl:lwjgl:${lwjglVersion}:natives-macos"
        runtimeOnly "org.lwjgl:lwjgl-glfw:${lwjglVersion}:natives-macos"
        runtimeOnly "org.lwjgl:lwjgl-opengl:${lwjglVersion}:natives-macos"

        runtimeOnly "org.lwjgl:lwjgl:${lwjglVersion}:natives-macos-arm64"
        runtimeOnly "org.lwjgl:lwjgl-glfw:${lwjglVersion}:natives-macos-arm64"
        runtimeOnly "org.lwjgl:lwjgl-opengl:${lwjglVersion}:natives-macos-arm64"
    }

    if (includeWindows) {
        runtimeOnly "org.lwjgl:lwjgl:${lwjglVersion}:natives-windows"
        runtimeOnly "org.lwjgl:lwjgl-glfw:${lwjglVersion}:natives-windows"
        runtimeOnly "org.lwjgl:lwjgl-opengl:${lwjglVersion}:natives-windows"

        runtimeOnly "org.lwjgl:lwjgl:${lwjglVersion}:natives-windows-x86"
        runtimeOnly "org.lwjgl:lwjgl-glfw:${lwjglVersion}:natives-windows-x86"
        runtimeOnly "org.lwjgl:lwjgl-opengl:${lwjglVersion}:natives-windows-x86"
    }
}

// tasks to download/clean the native physics library for each platform:

registerPlatformTasks('Linux64',     '_libbulletjme.so')
registerPlatformTasks('Linux_ARM32', '_libbulletjme.so')
registerPlatformTasks('Linux_ARM64', '_libbulletjme.so')

registerPlatformTasks('MacOSX64',     '_libbulletjme.dylib')
registerPlatformTasks('MacOSX_ARM64', '_libbulletjme.dylib')

registerPlatformTasks('Windows32', '_bulletjme.dll')
registerPlatformTasks('Windows64', '_bulletjme.dll')

// helper method to register 'download' and 'clean' tasks:

void registerPlatformTasks(String platform, String suffix) {
    String filename = platform + btf + suffix

    String cleanTaskName = 'clean' + platform
    clean.dependsOn(cleanTaskName)
    tasks.register(cleanTaskName, Delete) {
        delete downloadsDir + filename
    }

    tasks.register('download' + platform, MyDownload) {
        sourceUrl = libbulletjmeUrl + filename
        target = file(downloadsDir + filename)
    }
}

// helper class to wrap Ant download task:

class MyDownload extends DefaultTask {
    @Input
    String sourceUrl

    @OutputFile
    File target

    @TaskAction
    void download() {
        ant.get(src: sourceUrl, dest: target)
        println sourceUrl
    }
}
