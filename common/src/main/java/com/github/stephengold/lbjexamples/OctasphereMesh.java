/*
 Copyright (c) 2020-2022, Stephen Gold and Yanis Boudiaf
 All rights reserved.

 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions are met:

 1. Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.

 2. Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

 3. Neither the name of the copyright holder nor the names of its
    contributors may be used to endorse or promote products derived from
    this software without specific prior written permission.

 THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.github.stephengold.lbjexamples;

import com.jme3.math.FastMath;
import com.jme3.math.Vector3f;
import java.nio.FloatBuffer;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import jme3utilities.Validate;
import org.lwjgl.opengl.GL11C;

/**
 * A GL_TRIANGLES mesh (with texture coordinates) that approximates a sphere,
 * generated by subdividing the faces of a regular octahedron. The resulting
 * mesh is more isotropic than a U-V sphere and handles textures better than an
 * icosphere.
 * <p>
 * The center is at (0,0,0). All triangles face outward.
 * <p>
 * Texture coordinates are assigned as follows:
 * <ul>
 * <li>U is the azimuthal angle, measured (in half revs) from the +X axis to the
 * projection of the vector onto the X-Y plane. It ranges from -1 to +1.
 * <li>V is the polar angle, measured (in half revs) from the +Z axis. It ranges
 * from 0 to 1.
 * </ul>
 * <p>
 * Vertices with X=0 and Z&lt;0 lie on the seam. Those vertices are doubled and
 * can have either U=0 or U=1.
 * <p>
 * Derived from Icosphere by jayfella.
 *
 * @author Stephen Gold sgold@sonic.net
 */
public class OctasphereMesh extends Mesh {
    // *************************************************************************
    // constants

    /**
     * vertex indices of the 8 triangular faces in a regular octahedron
     * <p>
     * Vertices [4] and [6] occupy the same position in mesh space. In order to
     * create a seam, vertex [4] will have U=0 and vertex [6] will have U=1.
     */
    final private static int[] octaIndices = {
        0, 2, 5, 1, 6, 3,
        0, 3, 4, 1, 5, 2,
        0, 4, 2, 1, 3, 5,
        0, 5, 3, 1, 2, 6
    };

    /**
     * vertex locations in a regular octahedron with radius=1
     */
    final private static Vector3f[] octaLocations = {
        new Vector3f(-1f, 0f, 0f), new Vector3f(1f, 0f, 0f),
        new Vector3f(0f, -1f, 0f), new Vector3f(0f, 1f, 0f),
        new Vector3f(0f, 0f, -1f), new Vector3f(0f, 0f, 1f)
    };
    // *************************************************************************
    // fields

    /**
     * next vertex index to be assigned
     */
    private int nextVertexIndex = 0;
    /**
     * map vertex indices to U=1 flags
     */
    final private List<Boolean> u1Flags = new ArrayList<>(74);
    /**
     * map vertex indices to location vectors in mesh coordinates, all with
     * length=radius
     */
    final private List<Vector3f> locations = new ArrayList<>(74);
    /**
     * cache to avoid duplicate vertices: map index pairs to midpoint indices
     */
    final private Map<Long, Integer> midpointCache = new HashMap<>(67);
    // *************************************************************************
    // constructors

    /**
     * Instantiate a unit sphere using 3 refinement steps: 273 unique vertices,
     * 784 unique edges, and 512 triangular.
     */
    public OctasphereMesh() {
        this(3);
    }

    /**
     * Instantiate a unit sphere using the specified number of refinement steps:
     * <ul><li>
     * 0 steps &rarr; 7 unique vertices, 14 unique edges, and 8 triangular faces
     * </li><li>
     * 1 step &rarr; 21 unique vertices, 52 unique edges, and 32 triangular
     * faces
     * </li><li>
     * 2 steps &rarr; 73 unique vertices, 200 unique edges, and 128 triangular
     * faces
     * </li><li>
     * 3 steps &rarr; 273 unique vertices, 784 unique edges, and 512 triangular
     * faces
     * </li><li>
     * etcetera
     * </ul>
     *
     * @param numRefineSteps the desired number of refinement steps (&ge;0,
     * &le;13)
     */
    public OctasphereMesh(int numRefineSteps) {
        super(GL11C.GL_TRIANGLES, 3 << (3 + 2 * numRefineSteps));
        Validate.inRange(numRefineSteps, "number of refinement steps", 0, 13);
        /*
         *  Add the 6 vertices of a regular octahedron with radius=1.
         */
        for (Vector3f octaLocation : octaLocations) {
            addVertex(octaLocation, false);
        }
        /*
         * Add a 7th vertex. Vertices [4] and [6] occupy the same position
         * in mesh space. In order to create a seam, vertex [4] will have U=0
         * and vertex [6] will have U=1.
         */
        addVertex(octaLocations[4], true);
        /*
         *  Add the 8 triangular faces of a regular octahedron.
         */
        List<Integer> faces = new ArrayList<>(24);
        for (int octaIndex : octaIndices) {
            faces.add(octaIndex);
        }

        for (int stepIndex = 0; stepIndex < numRefineSteps; ++stepIndex) {
            List<Integer> newFaces = new ArrayList<>(4 * faces.size());
            /*
             * a refinement step: divide each edge into 2 halves;
             * for each triangle in {@code faces},
             * add 4 triangles to {@code newFaces}
             */
            for (int j = 0; j < faces.size(); j += vpt) {
                int v1 = faces.get(j);
                int v2 = faces.get(j + 1);
                int v3 = faces.get(j + 2);

                int a = midpointIndex(v1, v2);
                int b = midpointIndex(v2, v3);
                int c = midpointIndex(v3, v1);

                newFaces.add(v1);
                newFaces.add(a);
                newFaces.add(c);

                newFaces.add(v2);
                newFaces.add(b);
                newFaces.add(a);

                newFaces.add(v3);
                newFaces.add(c);
                newFaces.add(b);

                newFaces.add(a);
                newFaces.add(b);
                newFaces.add(c);
            }

            faces = newFaces;
        }

        midpointCache.clear();
        assert super.countVertices() == faces.size();

        FloatBuffer posBuffer = super.createPositionsBuffer();
        FloatBuffer uvBuffer = super.createUvs();

        Vector3f tmpVector = new Vector3f();
        for (int vertexIndex : faces) {
            Vector3f pos = locations.get(vertexIndex); // alias
            posBuffer.put(pos.x).put(pos.y).put(pos.z);

            tmpVector.set(pos);
            Utils.toSpherical(tmpVector);

            float u;
            if (u1Flags.get(vertexIndex)) {
                u = 1f;
            } else {
                u = tmpVector.z / FastMath.PI;
            }
            float v = tmpVector.y / FastMath.PI;
            uvBuffer.put(u).put(v);
        }

        posBuffer.flip();
        assert posBuffer.limit() == posBuffer.capacity();
        uvBuffer.flip();
        assert uvBuffer.limit() == uvBuffer.capacity();

        locations.clear();
        u1Flags.clear();
    }
    // *************************************************************************
    // private methods

    /**
     * Add a vertex to the lists of locations and normals.
     *
     * @param location the approximate vertex location (in mesh coordinates, not
     * null, unaffected)
     * @param u1Flag true if vertex lies on the seam and has U=1, otherwise
     * false
     * @return the index assigned to the new vertex (&ge;0)
     */
    private int addVertex(Vector3f location, boolean u1Flag) {
        float length = location.length();
        locations.add(location.mult(1f / length));
        u1Flags.add(u1Flag);

        int result = nextVertexIndex;
        ++nextVertexIndex;

        return result;
    }

    /**
     * Determine the midpoint between 2 locations. TODO MyVector3f
     *
     * @param vector1 coordinates of the first location (not null, unaffected
     * unless it's storeResult)
     * @param vector2 coordinates of the 2nd location (not null, unaffected
     * unless it's storeResult)
     * @param storeResult storage for the result (modified if not null, may be
     * vector1 or vector2)
     * @return a coordinate vector (either storeResult or a new instance)
     */
    private static Vector3f midpoint(Vector3f vector1, Vector3f vector2,
            Vector3f storeResult) {
        assert Validate.finite(vector1, "first location");
        assert Validate.finite(vector2, "2nd location");

        float x = (vector1.x + vector2.x) / 2;
        float y = (vector1.y + vector2.y) / 2;
        float z = (vector1.z + vector2.z) / 2;

        if (storeResult == null) {
            return new Vector3f(x, y, z);
        } else {
            return storeResult.set(x, y, z);
        }
    }

    /**
     * Determine the index of the vertex halfway between the indexed vertices.
     *
     * @param p1 the index of the first input vertex (&ge;0)
     * @param p2 the index of the 2nd input vertex (&ge;0)
     * @return the midpoint index (&ge;0)
     */
    private int midpointIndex(int p1, int p2) {
        /*
         * Check whether the midpoint has already been assigned an index.
         */
        boolean firstIsSmaller = p1 < p2;
        long smallerIndex = firstIsSmaller ? p1 : p2;
        long greaterIndex = firstIsSmaller ? p2 : p1;
        long key = (smallerIndex << 32) + greaterIndex;
        Integer cachedIndex = midpointCache.get(key);
        if (cachedIndex != null) {
            return cachedIndex;
        }
        /*
         * The midpoint vertex is not in the cache: calculate its location.
         */
        Vector3f loc1 = locations.get(p1);
        Vector3f loc2 = locations.get(p2);
        Vector3f middleLocation = midpoint(loc1, loc2, null);

        boolean u1Flag1 = u1Flags.get(p1);
        boolean u1Flag2 = u1Flags.get(p2);
        boolean middleU1Flag;
        if (middleLocation.x == 0f && middleLocation.z < 0f) {
            /*
             * The midpoint vertex lies on the seam.
             * Determine whether it will have U=0 or U=1.
             */
            middleU1Flag = (u1Flag1 || u1Flag2);
        } else {
            middleU1Flag = false;
        }
        /*
         * addVertex() adjusts the location to the sphere.
         */
        int newIndex = addVertex(middleLocation, middleU1Flag);
        /*
         * Add the new vertex to the midpoint cache.
         */
        midpointCache.put(key, newIndex);

        return newIndex;
    }
}
