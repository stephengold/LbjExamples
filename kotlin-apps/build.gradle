// Gradle script to build the "kotlin-apps" subproject of LbjExamples

plugins {
    id 'application' // to build JVM applications
    alias(libs.plugins.kotlin.jvm) // to compile Kotlin
}

application {
    mainClass = 'com.github.stephengold.lbjexamples.ktapps.console.HelloLibbulletjmeKt'
}
jar.manifest.attributes('Main-Class': application.mainClass)

dependencies {
    implementation(libs.libbulletjme)
    implementation platform(libs.lwjgl.bom)

    implementation(libs.joml)
    implementation(libs.lwjgl)
    implementation(libs.lwjgl.assimp)
    implementation(libs.lwjgl.glfw)
    implementation(libs.lwjgl.opengl)
}

ext {
    // which BTF (buildType + flavor) of the native physics library to copy:
    //btf = 'DebugSp'
    btf = 'ReleaseSp'

    fs = System.getProperty('file.separator')
    downloadsDir = System.getProperty('user.home') + fs + 'Downloads' + fs
    lbjVersion = libs.versions.libbulletjme.get()

    // URL from which native physics libraries should be copied:
    libbulletjmeUrl = "https://github.com/stephengold/Libbulletjme/releases/download/$lbjVersion/"
    //libbulletjmeUrl = "file:///home/sgold/NetBeansProjects/Libbulletjme/dist/"
}

// physics console apps (no graphics)
tasks.register('HelloLibbulletjme', JavaExec) {
    mainClass = 'com.github.stephengold.lbjexamples.ktapps.console.HelloLibbulletjmeKt'
}
tasks.register('HelloVehicle0', JavaExec) {
    mainClass = 'com.github.stephengold.lbjexamples.ktapps.console.HelloVehicle0Kt'
}

// physics tutorial apps (very simple)
tasks.register('HelloRigidBody', JavaExec) {
    description 'Runs the HelloRigidBody tutorial app.'
    mainClass = 'com.github.stephengold.lbjexamples.ktapps.HelloRigidBodyKt'
}
tasks.register('HelloSport', JavaExec) {
    description 'Runs the HelloSport tutorial app.'
    mainClass = 'com.github.stephengold.lbjexamples.ktapps.HelloSportKt'
}

import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform
OperatingSystem os = DefaultNativePlatform.currentOperatingSystem
Boolean includeLinux = os.isLinux()
Boolean includeMacOsX = os.isMacOsX()
Boolean includeWindows = os.isWindows()

tasks.withType(JavaExec).configureEach { // Java runtime options:
    if (os.isMacOsX()) {
        jvmArgs '-XstartOnFirstThread' // required for GLFW on macOS
    }
    classpath sourceSets.main.runtimeClasspath
    enableAssertions true
    jvmArgs '-XX:+UseG1GC', '-XX:MaxGCPauseMillis=10'

    if (includeLinux) {
        dependsOn 'downloadLinux64'
        dependsOn 'downloadLinux_ARM32'
        dependsOn 'downloadLinux_ARM64'
    }
    if (includeMacOsX) {
        dependsOn 'downloadMacOSX64'
        dependsOn 'downloadMacOSX_ARM64'
    }
    if (includeWindows) {
        dependsOn 'downloadWindows32'
        dependsOn 'downloadWindows64'
    }
}

dependencies {
    if (includeLinux) {
        runtimeOnly(variantOf(libs.lwjgl){classifier("natives-linux")})
        runtimeOnly(variantOf(libs.lwjgl.assimp){classifier("natives-linux")})
        runtimeOnly(variantOf(libs.lwjgl.glfw){classifier("natives-linux")})
        runtimeOnly(variantOf(libs.lwjgl.opengl){classifier("natives-linux")})

        runtimeOnly(variantOf(libs.lwjgl){classifier("natives-linux-arm32")})
        runtimeOnly(variantOf(libs.lwjgl.assimp){classifier("natives-linux-arm32")})
        runtimeOnly(variantOf(libs.lwjgl.glfw){classifier("natives-linux-arm32")})
        runtimeOnly(variantOf(libs.lwjgl.opengl){classifier("natives-linux-arm32")})

        runtimeOnly(variantOf(libs.lwjgl){classifier("natives-linux-arm64")})
        runtimeOnly(variantOf(libs.lwjgl.assimp){classifier("natives-linux-arm64")})
        runtimeOnly(variantOf(libs.lwjgl.glfw){classifier("natives-linux-arm64")})
        runtimeOnly(variantOf(libs.lwjgl.opengl){classifier("natives-linux-arm64")})
    }

    if (includeMacOsX) {
        runtimeOnly(variantOf(libs.lwjgl){classifier("natives-macos")})
        runtimeOnly(variantOf(libs.lwjgl.assimp){classifier("natives-macos")})
        runtimeOnly(variantOf(libs.lwjgl.glfw){classifier("natives-macos")})
        runtimeOnly(variantOf(libs.lwjgl.opengl){classifier("natives-macos")})

        runtimeOnly(variantOf(libs.lwjgl){classifier("natives-macos-arm64")})
        runtimeOnly(variantOf(libs.lwjgl.assimp){classifier("natives-macos-arm64")})
        runtimeOnly(variantOf(libs.lwjgl.glfw){classifier("natives-macos-arm64")})
        runtimeOnly(variantOf(libs.lwjgl.opengl){classifier("natives-macos-arm64")})
    }

    if (includeWindows) {
        runtimeOnly(variantOf(libs.lwjgl){classifier("natives-windows")})
        runtimeOnly(variantOf(libs.lwjgl.assimp){classifier("natives-windows")})
        runtimeOnly(variantOf(libs.lwjgl.glfw){classifier("natives-windows")})
        runtimeOnly(variantOf(libs.lwjgl.opengl){classifier("natives-windows")})

        runtimeOnly(variantOf(libs.lwjgl){classifier("natives-windows-x86")})
        runtimeOnly(variantOf(libs.lwjgl.assimp){classifier("natives-windows-x86")})
        runtimeOnly(variantOf(libs.lwjgl.glfw){classifier("natives-windows-x86")})
        runtimeOnly(variantOf(libs.lwjgl.opengl){classifier("natives-windows-x86")})
    }

    implementation(libs.sport)
}

// Register tasks to download/clean the native physics library for each platform:

registerPlatformTasks('Linux64',     '_libbulletjme.so')
registerPlatformTasks('Linux_ARM32', '_libbulletjme.so')
registerPlatformTasks('Linux_ARM64', '_libbulletjme.so')

registerPlatformTasks('MacOSX64',     '_libbulletjme.dylib')
registerPlatformTasks('MacOSX_ARM64', '_libbulletjme.dylib')

registerPlatformTasks('Windows32', '_bulletjme.dll')
registerPlatformTasks('Windows64', '_bulletjme.dll')

// helper method to register 'download' and 'clean' tasks:

void registerPlatformTasks(String platform, String suffix) {
    String filename = platform + btf + suffix

    String cleanTaskName = 'clean' + platform
    clean.dependsOn(cleanTaskName)
    tasks.register(cleanTaskName, Delete) {
        delete downloadsDir + filename
    }

    tasks.register('download' + platform, MyDownload) {
        sourceUrl = libbulletjmeUrl + filename
        target = file(downloadsDir + filename)
    }
}

// helper class to wrap Ant download task:

class MyDownload extends DefaultTask {
    @Input
    String sourceUrl

    @OutputFile
    File target

    @TaskAction
    void download() {
        ant.get(src: sourceUrl, dest: target)
        println sourceUrl
    }
}
